{ "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launch a CoreOS cluster running swarm.",

  "Mappings" : {
      "VpcCidrs" : {
        "eu-west-1" :       { "vpc" : "10.203.0.0/16", "pubsubnet1" : "10.203.0.0/24", "pubsubnet2" : "10.203.1.0/24", "pubsubnet3" : "10.203.2.0/24" }
      },

      "RegionMap" : {
        "eu-west-1" :       { "AMI" : "ami-07282b0759f19ccca" }
      }
  },

  "Parameters" : {
    "InstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues" : [
        "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge",
        "t2.2xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large",
        "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge",
        "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large",
        "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c5.large",
        "c5.xlarge", "c5.2xlarge", "c5.4xlarge", "c5.9xlarge", "c5.18xlarge",
        "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large",
        "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge",
        "x1.16xlarge", "x1.32xlarge", "x1e.xlarge", "x1e.2xlarge", "x1e.4xlarge",
        "x1e.8xlarge", "x1e.16xlarge", "x1e.32xlarge", "d2.xlarge", "d2.2xlarge",
        "d2.4xlarge", "d2.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge",
        "i2.8xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge",
        "i3.8xlarge", "i3.16xlarge", "f1.2xlarge", "f1.16xlarge", "g2.2xlarge",
        "g2.8xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "p2.xlarge",
        "p2.8xlarge", "p2.16xlarge", "p3.2xlarge", "p3.8xlarge", "p3.16xlarge" ],
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.micro"
    },

    "ClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "3",
      "MaxValue" : "6",
      "Description" : "Number of nodes in the CoreOS cluster (3-12)."
    },

    "AllowSSHFrom" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) from which SSH and docker on the master are available. Default is from anywhere (use with caution).",
      "Default" : "0.0.0.0/0"
    },

    "KeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "The name of an EC2 Key Pair to allow SSH access to the master.",
      "Default" : ""
    },

    "VpcAvailabilityZones" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Comma-delimited list of three VPC availability zones in which nodes are created.",
      "Default" : "eu-west-1a,eu-west-1b,eu-west-1c"
    }
  },

  "Resources" : {
    "Vpc" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "vpc" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
        ]
      }
    },

    "PubSubnetAz1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet1" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet1"] ] } }
        ]
      }
    },

    "PubSubnetAz2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet2" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet2"] ] } }
        ]
      }
    },

    "PubSubnetAz3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "CidrBlock" : { "Fn::FindInMap" : [ "VpcCidrs", { "Ref" : "AWS::Region" }, "pubsubnet3" ] },
        "AvailabilityZone" : { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet3"] ] } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
        ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIgw" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "Vpc"}
      }
    },

    "PublicRouteViaIgw" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIgw" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PubSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz1" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz2" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "PubSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PubSubnetAz3" },
        "RouteTableId" : { "Ref" : "RouteViaIgw" }
      }
    },

    "MasterCoreOSSecurityGroup" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Master CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "4243", "ToPort" : "4243", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "2375", "ToPort" : "2375", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "4243", "ToPort" : "4243", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ] } },
          { "IpProtocol" : "tcp", "FromPort" : "7946", "ToPort" : "7946", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ] } },
          { "IpProtocol" : "tcp", "FromPort" : "2377", "ToPort" : "2377", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ] } },
          { "IpProtocol" : "udp", "FromPort" : "4789", "ToPort" : "4789", "SourceSecurityGroupId" : { "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ] } }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master-SG" ] ] } }
        ]
      }
    },

    "NodeCoreOSSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Node CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node-SG" ] ] } }
        ]
      }
    },

    "NodeIngress4243" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4243",
        "ToPort" : "4243",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress7946" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "7946",
        "ToPort" : "7946",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress2377" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2377",
        "ToPort" : "2377",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress4789" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "udp",
        "FromPort" : "4789",
        "ToPort" : "4789",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress4243" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4243",
        "ToPort" : "4243",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress7946" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "7946",
        "ToPort" : "7946",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress2377" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2377",
        "ToPort" : "2377",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress4789" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "udp",
        "FromPort" : "4789",
        "ToPort" : "4789",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterCoreOSInstance" : {
      "DependsOn" : "InternetGateway",
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] },
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType"},
        "KeyName" : { "Ref" : "KeyName"},
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": "true",
          "DeleteOnTermination" : "true",
          "DeviceIndex": "0",
          "SubnetId": { "Ref" : "PubSubnetAz1" },
          "GroupSet" : [ { "Ref" : "MasterCoreOSSecurityGroup" } ]
        } ],
        "UserData" : { "Fn::Base64" :
          { "Fn::Join" : [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd2:\n",
            "    discovery: ", { "Ref" : "DiscoveryURL" }, "\n",
            "    advertise-client-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2377\n",
            "    initial-advertise-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:4789\n",
            "    listen-client-urls: http://0.0.0.0:2377,http://0.0.0.0:7946\n",
            "    listen-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:4789\n",
            "  units:\n",
            "    - name: docker-tcp.socket\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Docker Socket for the API\n\n",
            "        [Socket]\n",
            "        ListenStream=4243\n",
            "        BindIPv6Only=both\n",
            "        Service=docker.service\n\n",
            "        [Install]\n",
            "        WantedBy=sockets.target\n",
            "    - name: etcd2.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "    - name: docker-swarm.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Swarm service\n",
            "        After=docker.service\n\n",
            "        [Service]\n",
            "        Restart=no\n",
            "        ExecStart=/usr/bin/docker run --name docker-swarm -d -p 2375:2375 swarm manage etcd://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2377/swarm\n"
            ] ]
          }
        },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master" ] ] } }
        ]
      }
    },

    "CoreOSServerAsg" : {
      "DependsOn" : "MasterCoreOSInstance",
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [ { "Fn::Select" : [ "0", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "1", { "Ref" : "VpcAvailabilityZones" } ] }, { "Fn::Select" : [ "2", { "Ref" : "VpcAvailabilityZones" } ] } ],
        "VPCZoneIdentifier" : [ { "Fn::Join" : [",", [ { "Ref" : "PubSubnetAz1" }, { "Ref" : "PubSubnetAz2" }, { "Ref" : "PubSubnetAz3" } ] ] } ],
        "LaunchConfigurationName" : { "Ref" : "CoreOSServerLc" },
        "MinSize" : "3",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "ClusterSize"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "CoreOSServerLc" : {
      "DependsOn" : [ "InternetGateway", "MasterCoreOSInstance" ],
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeCoreOSSecurityGroup"} ],
        "UserData" : { "Fn::Base64" :
          { "Fn::Join" : [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd2:\n",
            "    discovery: ", { "Ref" : "DiscoveryURL" }, "\n",
            "    advertise-client-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2377\n",
            "    initial-advertise-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:4789\n",
            "    listen-client-urls: http://0.0.0.0:2377,http://0.0.0.0:7946\n",
            "    listen-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:4789\n",
            "  units:\n",
            "    - name: docker-tcp.socket\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Docker Socket for the API\n\n",
            "        [Socket]\n",
            "        ListenStream=4243\n",
            "        BindIPv6Only=both\n",
            "        Service=docker.service\n\n",
            "        [Install]\n",
            "        WantedBy=sockets.target\n",
            "    - name: etcd2.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "    - name: docker-swarm.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Swarm service\n",
            "        After=docker.service\n\n",
            "        [Service]\n",
            "        Restart=no\n",
            "        ExecStart=/usr/bin/docker run --name docker-swarm -d swarm join --addr=$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:4243 etcd://", { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PrivateIp" ] }, ":2377/swarm\n"
            ] ]
          }
        }
      }
    }
  },

  "Outputs" : {
    "MasterDockerPs" : {
      "Description" : "Command to run a 'docker ps' on the cluster master",
      "Value" : { "Fn::Join" : [ "", [ "docker -H tcp://", { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PublicIp" ] }, ":2375 ps" ] ] }
    },
    "MasterPublicIP" : {
      "Description" : "Public IP for the cluster master",
      "Value" : { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PublicIp" ] }
    },
    "MasterPrivateIP" : {
      "Description" : "Private IP for the cluster master",
      "Value" : { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PrivateIp" ] }
    }
  }
}
