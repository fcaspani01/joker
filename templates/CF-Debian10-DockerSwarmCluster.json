{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launch a Debian cluster running swarm.",
  "Mappings": {
    "VpcCidrs": {
      "eu-west-1": {
        "vpc": "10.203.0.0/16",
        "pubsubnet1": "10.203.0.0/24",
        "pubsubnet2": "10.203.1.0/24",
        "pubsubnet3": "10.203.2.0/24"
      }
    },
    "RegionMap": {
      "eu-west-1": {
        "AMI": "ami-09ea48ee08b5fd32c"
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Type": "String",
      "Description": "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "AllowedValues": [
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 HVM instance type.",
      "Default": "t2.large"
    },
    "ClusterSize": {
      "Type": "Number",
      "Default": "2",
      "MinValue": "2",
      "MaxValue": "6",
      "Description": "Number of nodes in the Debian cluster"
    },
    "AllowSSHFrom": {
      "Type": "String",
      "Description": "The net block (CIDR) from which SSH and docker on the master are available. Default is from anywhere (use with caution).",
      "Default": "0.0.0.0/0"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The name of an EC2 Key Pair to allow SSH access to the master.",
      "Default": ""
    },
    "VpcAvailabilityZones": {
      "Type": "CommaDelimitedList",
      "Description": "Comma-delimited list of three VPC availability zones in which nodes are created.",
      "Default": "eu-west-1a,eu-west-1b,eu-west-1c"
    },
    "UserData": {
      "Type": "String"
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "vpc"
          ]
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "VPC"
                ]
              ]
            }
          }
        ]
      }
    },
    "PubSubnetAz1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "pubsubnet1"
          ]
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "VpcAvailabilityZones"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet1"
                ]
              ]
            }
          }
        ]
      }
    },
    "PubSubnetAz2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "pubsubnet2"
          ]
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Ref": "VpcAvailabilityZones"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet2"
                ]
              ]
            }
          }
        ]
      }
    },
    "PubSubnetAz3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "VpcCidrs",
            {
              "Ref": "AWS::Region"
            },
            "pubsubnet3"
          ]
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Ref": "VpcAvailabilityZones"
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Subnet3"
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "IGW"
                ]
              ]
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteViaIgw": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicRouteViaIgw": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PubSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz1"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "PubSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz2"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "PubSubnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz3"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "MasterInstanceEbsVolume": {
      "Type": "AWS::EC2::Volume",
      "Properties": {
        "AutoEnableIO": Boolean,
        "AvailabilityZone": String,
        "Encrypted": Boolean,
        "Iops": Integer,
        "KmsKeyId": String,
        "MultiAttachEnabled": Boolean,
        "OutpostArn": String,
        "Size": Integer,
        "SnapshotId": String,
        "Tags": [
          Tag,
          ...
        ],
        "Throughput": Integer,
        "VolumeType": String
      }
    },
    "MasterDebianSecurityGroup": {
      "DependsOn": "NodeDebianSecurityGroup",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Master Debian SecurityGroup",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AllowSSHFrom"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "4243",
            "ToPort": "4243",
            "CidrIp": {
              "Ref": "AllowSSHFrom"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2375",
            "ToPort": "2375",
            "CidrIp": {
              "Ref": "AllowSSHFrom"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "4243",
            "ToPort": "4243",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeDebianSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7946",
            "ToPort": "7946",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeDebianSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "2377",
            "ToPort": "2377",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeDebianSecurityGroup",
                "GroupId"
              ]
            }
          },
          {
            "IpProtocol": "udp",
            "FromPort": "4789",
            "ToPort": "4789",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "NodeDebianSecurityGroup",
                "GroupId"
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Master-SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "NodeDebianSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Node Debian SecurityGroup",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AllowSSHFrom"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Node-SG"
                ]
              ]
            }
          }
        ]
      }
    },
    "NodeIngress4243": {
      "DependsOn": "NodeDebianSecurityGroup",
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "4243",
        "ToPort": "4243",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "NodeIngress7946": {
      "DependsOn": "NodeDebianSecurityGroup",
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "7946",
        "ToPort": "7946",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "NodeIngress2377": {
      "DependsOn": "NodeDebianSecurityGroup",
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "2377",
        "ToPort": "2377",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "NodeIngress4789": {
      "DependsOn": "NodeDebianSecurityGroup",
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "udp",
        "FromPort": "4789",
        "ToPort": "4789",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "MasterIngress4243": {
      "DependsOn": [
        "MasterDebianSecurityGroup",
        "NodeDebianSecurityGroup"
      ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "4243",
        "ToPort": "4243",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MasterDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "MasterIngress7946": {
      "DependsOn": [
        "MasterDebianSecurityGroup",
        "NodeDebianSecurityGroup"
      ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "7946",
        "ToPort": "7946",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MasterDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "MasterIngress2377": {
      "DependsOn": [
        "MasterDebianSecurityGroup",
        "NodeDebianSecurityGroup"
      ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": "2377",
        "ToPort": "2377",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MasterDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "MasterIngress4789": {
      "DependsOn": [
        "MasterDebianSecurityGroup",
        "NodeDebianSecurityGroup"
      ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "NodeDebianSecurityGroup",
            "GroupId"
          ]
        },
        "IpProtocol": "udp",
        "FromPort": "4789",
        "ToPort": "4789",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "MasterDebianSecurityGroup",
            "GroupId"
          ]
        }
      }
    },
    "MasterDebianInstance": {
      "DependsOn": "InternetGateway",
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Ref": "VpcAvailabilityZones"
            }
          ]
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "SubnetId": {
              "Ref": "PubSubnetAz1"
            },
            "GroupSet": [
              {
                "Ref": "MasterDebianSecurityGroup"
              }
            ]
          }
        ],
        "UserData": {
          "Ref": "UserData"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Master"
                ]
              ]
            }
          }
        ]
      }
    },
    "DebianServerAsg": {
      "DependsOn": "MasterDebianInstance",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": [
          {
            "Fn::Select": [
              "0",
              {
                "Ref": "VpcAvailabilityZones"
              }
            ]
          },
          {
            "Fn::Select": [
              "1",
              {
                "Ref": "VpcAvailabilityZones"
              }
            ]
          },
          {
            "Fn::Select": [
              "2",
              {
                "Ref": "VpcAvailabilityZones"
              }
            ]
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Fn::Join": [
              ",",
              [
                {
                  "Ref": "PubSubnetAz1"
                },
                {
                  "Ref": "PubSubnetAz2"
                },
                {
                  "Ref": "PubSubnetAz3"
                }
              ]
            ]
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "DebianServerLc"
        },
        "MinSize": "2",
        "MaxSize": "6",
        "DesiredCapacity": {
          "Ref": "ClusterSize"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Node"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "DebianServerLc": {
      "DependsOn": [
        "InternetGateway",
        "MasterDebianInstance"
      ],
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "AssociatePublicIpAddress": true,
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroups": [
          {
            "Ref": "NodeDebianSecurityGroup"
          }
        ],
        "UserData": {
          "Ref": "UserData"
        }
      }
    }
  },
  "Outputs": {
    "MasterDockerPs": {
      "Description": "Command to run a 'docker ps' on the cluster master",
      "Value": {
        "Fn::Join": [
          "",
          [
            "docker -H tcp://",
            {
              "Fn::GetAtt": [
                "MasterDebianInstance",
                "PublicIp"
              ]
            },
            ":2375 ps"
          ]
        ]
      }
    },
    "MasterPublicIP": {
      "Description": "Public IP for the cluster master",
      "Value": {
        "Fn::GetAtt": [
          "MasterDebianInstance",
          "PublicIp"
        ]
      }
    },
    "MasterPrivateIP": {
      "Description": "Private IP for the cluster master",
      "Value": {
        "Fn::GetAtt": [
          "MasterDebianInstance",
          "PrivateIp"
        ]
      }
    }
  }
}
